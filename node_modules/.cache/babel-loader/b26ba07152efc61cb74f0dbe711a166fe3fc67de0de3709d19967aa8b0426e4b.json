{"ast":null,"code":"import React,{useState}from'react';import'./Chatbot.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[open,setOpen]=useState(false);const[messages,setMessages]=useState([{sender:'bot',text:'Hi! How can I help you today?'}]);const[input,setInput]=useState('');const handleSend=()=>{if(input.trim()==='')return;setMessages([...messages,{sender:'user',text:input}]);setInput('');// Simulate bot response\nsetTimeout(()=>{setMessages(msgs=>[...msgs,{sender:'bot',text:\"I'm just a demo bot!\"}]);},700);};return/*#__PURE__*/_jsxs(\"div\",{className:`chatbot-container${open?' open':''}`,children:[!open&&/*#__PURE__*/_jsx(\"button\",{className:\"chatbot-float-btn\",onClick:()=>setOpen(true),children:\"\\uD83D\\uDCAC\"}),open&&/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-window\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-header\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Chatbot\"}),/*#__PURE__*/_jsx(\"button\",{className:\"chatbot-close\",onClick:()=>setOpen(false),children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatbot-messages\",children:messages.map((msg,idx)=>/*#__PURE__*/_jsx(\"div\",{className:`chatbot-msg chatbot-msg-${msg.sender}`,children:msg.text},idx))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-input-row\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:e=>setInput(e.target.value),onKeyDown:e=>e.key==='Enter'?handleSend():null,placeholder:\"Type your message...\",className:\"chatbot-input\"}),/*#__PURE__*/_jsx(\"button\",{className:\"chatbot-send\",onClick:handleSend,children:\"Send\"})]})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Chatbot","open","setOpen","messages","setMessages","sender","text","input","setInput","handleSend","trim","setTimeout","msgs","className","children","onClick","map","msg","idx","type","value","onChange","e","target","onKeyDown","key","placeholder"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca-bk/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Chatbot.css';\n\nconst Chatbot = () => {\n  const [open, setOpen] = useState(false);\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'Hi! How can I help you today?' }\n  ]);\n  const [input, setInput] = useState('');\n\n  const handleSend = () => {\n    if (input.trim() === '') return;\n    setMessages([...messages, { sender: 'user', text: input }]);\n    setInput('');\n    // Simulate bot response\n    setTimeout(() => {\n      setMessages(msgs => [...msgs, { sender: 'bot', text: \"I'm just a demo bot!\" }]);\n    }, 700);\n  };\n\n  return (\n    <div className={`chatbot-container${open ? ' open' : ''}`}>  \n      {!open && (\n        <button className=\"chatbot-float-btn\" onClick={() => setOpen(true)}>\n          ðŸ’¬\n        </button>\n      )}\n      {open && (\n        <div className=\"chatbot-window\">\n          <div className=\"chatbot-header\">\n            <span>Chatbot</span>\n            <button className=\"chatbot-close\" onClick={() => setOpen(false)}>Ã—</button>\n          </div>\n          <div className=\"chatbot-messages\">\n            {messages.map((msg, idx) => (\n              <div key={idx} className={`chatbot-msg chatbot-msg-${msg.sender}`}>{msg.text}</div>\n            ))}\n          </div>\n          <div className=\"chatbot-input-row\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={e => setInput(e.target.value)}\n              onKeyDown={e => e.key === 'Enter' ? handleSend() : null}\n              placeholder=\"Type your message...\"\n              className=\"chatbot-input\"\n            />\n            <button className=\"chatbot-send\" onClick={handleSend}>Send</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvB,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CACvC,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,CACvC,CAAEU,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,+BAAgC,CAAC,CACzD,CAAC,CACF,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAc,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAIF,KAAK,CAACG,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,OACzBN,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAE,CAAEE,MAAM,CAAE,MAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAC,CAAC,CAC3DC,QAAQ,CAAC,EAAE,CAAC,CACZ;AACAG,UAAU,CAAC,IAAM,CACfP,WAAW,CAACQ,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAE,CAAEP,MAAM,CAAE,KAAK,CAAEC,IAAI,CAAE,sBAAuB,CAAC,CAAC,CAAC,CACjF,CAAC,CAAE,GAAG,CAAC,CACT,CAAC,CAED,mBACEP,KAAA,QAAKc,SAAS,CAAE,oBAAoBZ,IAAI,CAAG,OAAO,CAAG,EAAE,EAAG,CAAAa,QAAA,EACvD,CAACb,IAAI,eACJJ,IAAA,WAAQgB,SAAS,CAAC,mBAAmB,CAACE,OAAO,CAAEA,CAAA,GAAMb,OAAO,CAAC,IAAI,CAAE,CAAAY,QAAA,CAAC,cAEpE,CAAQ,CACT,CACAb,IAAI,eACHF,KAAA,QAAKc,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7Bf,KAAA,QAAKc,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BjB,IAAA,SAAAiB,QAAA,CAAM,SAAO,CAAM,CAAC,cACpBjB,IAAA,WAAQgB,SAAS,CAAC,eAAe,CAACE,OAAO,CAAEA,CAAA,GAAMb,OAAO,CAAC,KAAK,CAAE,CAAAY,QAAA,CAAC,MAAC,CAAQ,CAAC,EACxE,CAAC,cACNjB,IAAA,QAAKgB,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAC9BX,QAAQ,CAACa,GAAG,CAAC,CAACC,GAAG,CAAEC,GAAG,gBACrBrB,IAAA,QAAegB,SAAS,CAAE,2BAA2BI,GAAG,CAACZ,MAAM,EAAG,CAAAS,QAAA,CAAEG,GAAG,CAACX,IAAI,EAAlEY,GAAwE,CACnF,CAAC,CACC,CAAC,cACNnB,KAAA,QAAKc,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCjB,IAAA,UACEsB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEb,KAAM,CACbc,QAAQ,CAAEC,CAAC,EAAId,QAAQ,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CACxCI,SAAS,CAAEF,CAAC,EAAIA,CAAC,CAACG,GAAG,GAAK,OAAO,CAAGhB,UAAU,CAAC,CAAC,CAAG,IAAK,CACxDiB,WAAW,CAAC,sBAAsB,CAClCb,SAAS,CAAC,eAAe,CAC1B,CAAC,cACFhB,IAAA,WAAQgB,SAAS,CAAC,cAAc,CAACE,OAAO,CAAEN,UAAW,CAAAK,QAAA,CAAC,MAAI,CAAQ,CAAC,EAChE,CAAC,EACH,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAd,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
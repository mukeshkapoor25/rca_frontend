{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Routes,Route}from'react-router-dom';import{Container}from'react-bootstrap';// Components\nimport Navigation from'./components/Navigation';import Dashboard from'./components/Dashboard';import UploadLogFile from'./components/UploadLogFile';import RCALatestCard from'./components/RCALatestCard';import Chatbot from'./components/Chatbot';// Services\nimport{apiService,initializeSocket}from'./services/apiService';import{getAPIHealthStatus}from'./api/health';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[apiHealth,setApiHealth]=useState(null);const[isConnected,setIsConnected]=useState(false);const[agentsStatus,setAgentsStatus]=useState({});const[socket,setSocket]=useState(null);useEffect(()=>{// Initialize socket connection\nconst socketInstance=initializeSocket();setSocket(socketInstance);// Set up socket event listeners\nsocketInstance.on('connect',()=>{console.log('Connected to server');setIsConnected(true);});socketInstance.on('disconnect',()=>{console.log('Disconnected from server');setIsConnected(false);});// Subscribe to real-time updates\napiService.subscribeToDashboard(data=>{console.log('Dashboard update:',data);});apiService.subscribeToAgents(data=>{console.log('Agents update:',data);setAgentsStatus(data);});// Initial data fetch\ncheckApiHealth();fetchAgentsStatus();// Set up periodic checks\nconst healthInterval=setInterval(checkApiHealth,30000);const agentsInterval=setInterval(fetchAgentsStatus,10000);return()=>{clearInterval(healthInterval);clearInterval(agentsInterval);if(socketInstance){socketInstance.disconnect();}};},[]);const checkApiHealth=async()=>{try{const health=await getAPIHealthStatus();setApiHealth(health);setIsConnected(health==='healthy');}catch(error){console.error('API health check failed:',error);setIsConnected(false);setApiHealth(null);}};const fetchAgentsStatus=async()=>{try{const status=await apiService.getAgentsStatus();setAgentsStatus(status);}catch(error){console.error('Failed to fetch agents status:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Navigation,{isConnected:isConnected,agentsStatus:agentsStatus}),/*#__PURE__*/_jsx(Container,{fluid:true,className:\"py-4\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Dashboard,{apiHealth:apiHealth,isConnected:isConnected,agentsStatus:agentsStatus,socket:socket})}),/*#__PURE__*/_jsx(Route,{path:\"/upload\",element:/*#__PURE__*/_jsx(UploadLogFile,{})}),/*#__PURE__*/_jsx(Route,{path:\"/rca-results\",element:/*#__PURE__*/_jsx(RCALatestCard,{})})]})}),/*#__PURE__*/_jsx(Chatbot,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","Container","Navigation","Dashboard","UploadLogFile","RCALatestCard","Chatbot","apiService","initializeSocket","getAPIHealthStatus","jsx","_jsx","jsxs","_jsxs","App","apiHealth","setApiHealth","isConnected","setIsConnected","agentsStatus","setAgentsStatus","socket","setSocket","socketInstance","on","console","log","subscribeToDashboard","data","subscribeToAgents","checkApiHealth","fetchAgentsStatus","healthInterval","setInterval","agentsInterval","clearInterval","disconnect","health","error","status","getAgentsStatus","className","children","fluid","path","element"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca-bk/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Dashboard from './components/Dashboard';\nimport UploadLogFile from './components/UploadLogFile';\nimport RCALatestCard from './components/RCALatestCard';\nimport Chatbot from './components/Chatbot';\n\n// Services\nimport { apiService, initializeSocket } from './services/apiService';\nimport { getAPIHealthStatus } from './api/health';\n\nfunction App() {\n  const [apiHealth, setApiHealth] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [agentsStatus, setAgentsStatus] = useState({});\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    // Initialize socket connection\n    const socketInstance = initializeSocket();\n    setSocket(socketInstance);\n\n    // Set up socket event listeners\n    socketInstance.on('connect', () => {\n      console.log('Connected to server');\n      setIsConnected(true);\n    });\n\n    socketInstance.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setIsConnected(false);\n    });\n\n    // Subscribe to real-time updates\n    apiService.subscribeToDashboard((data) => {\n      console.log('Dashboard update:', data);\n    });\n\n    apiService.subscribeToAgents((data) => {\n      console.log('Agents update:', data);\n      setAgentsStatus(data);\n    });\n\n    // Initial data fetch\n    checkApiHealth();\n    fetchAgentsStatus();\n\n    // Set up periodic checks\n    const healthInterval = setInterval(checkApiHealth, 30000);\n    const agentsInterval = setInterval(fetchAgentsStatus, 10000);\n\n    return () => {\n      clearInterval(healthInterval);\n      clearInterval(agentsInterval);\n      if (socketInstance) {\n        socketInstance.disconnect();\n      }\n    };\n  }, []);\n\n  const checkApiHealth = async () => {\n    try {\n      const health = await getAPIHealthStatus();\n      setApiHealth(health);\n      setIsConnected(health === 'healthy');\n    } catch (error) {\n      console.error('API health check failed:', error);\n      setIsConnected(false);\n      setApiHealth(null);\n    }\n  };\n\n  const fetchAgentsStatus = async () => {\n    try {\n      const status = await apiService.getAgentsStatus();\n      setAgentsStatus(status);\n    } catch (error) {\n      console.error('Failed to fetch agents status:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation isConnected={isConnected} agentsStatus={agentsStatus} />\n      <Container fluid className=\"py-4\">\n        <Routes>\n          <Route \n            path=\"/\" \n            element={\n              <Dashboard \n                apiHealth={apiHealth} \n                isConnected={isConnected}\n                agentsStatus={agentsStatus}\n                socket={socket}\n              />\n            } \n          />\n           \n          <Route \n            path=\"/upload\" \n            element={<UploadLogFile />} \n          />\n          <Route \n            path=\"/rca-results\" \n            element={<RCALatestCard />} \n          />\n          {/* Removed: AgentsManagement, RealTimeStream, SystemHealth routes */}\n        </Routes>\n      </Container>\n      <Chatbot />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instances for different services\nconst apiClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst fileUploadClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 120000,\n  // Longer timeout for file uploads\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n});\n\n// ...existing code...\n\n// Request interceptors\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptors\napiClient.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // Agents status endpoint for App.js\n  getAgentsStatus: async () => {\n    const response = await apiClient.get('/agents/status');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  // Root endpoint info\n  getRootInfo: async () => {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n  // Analysis endpoints (agent-based)\n  analyzeLogFile: async (file, options = {}) => {\n    const formData = new FormData();\n    formData.append('files', file);\n\n    // Add options to form data if needed\n    Object.keys(options).forEach(key => {\n      formData.append(key, options[key]);\n    });\n    const response = await fileUploadClient.post('/batch-analyze', formData);\n    return response.data;\n  },\n  analyzeLogText: async (logText, options = {}) => {\n    const response = await apiClient.post('/analyze', {\n      log_text: logText,\n      ...options\n    });\n    return response.data;\n  },\n  analyzeSample: async (sampleType = 'hadoop_error_logs') => {\n    const response = await apiClient.post('/analyze/sample', {\n      sample_type: sampleType\n    });\n    return response.data;\n  },\n  // System monitoring\n  getMetricsSummary: async () => {\n    const response = await apiClient.get('/metrics/summary');\n    return response.data;\n  },\n  getRecentActivity: async () => {\n    const response = await apiClient.get('/activity/recent');\n    return response.data;\n  },\n  // ...existing code...\n\n  // Agent-specific operations (using generic agent endpoints)\n  coordinatorAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    executeWorkflow: data => apiClient.post('/analyze', data).then(r => r.data)\n  },\n  anomalyAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    detectAnomalies: data => apiClient.post('/analyze', data).then(r => r.data)\n  },\n  rootCauseAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    analyzeRootCause: data => apiClient.post('/analyze', data).then(r => r.data)\n  },\n  logParserAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    parseLogs: data => apiClient.post('/analyze', data).then(r => r.data)\n  },\n  explanationAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    generateExplanation: data => apiClient.post('/analyze', data).then(r => r.data)\n  },\n  // ...existing code...\n\n  // System health monitoring\n  getSystemHealth: () => apiClient.get('/health').then(r => r.data),\n  // File upload for log analysis (uses batch-analyze endpoint)\n  uploadLogFile: file => {\n    const formData = new FormData();\n    formData.append('files', file);\n    return fileUploadClient.post('/batch-analyze', formData).then(r => r.data);\n  },\n  // Log analysis\n  analyzeLogContent: content => apiClient.post('/analyze', {\n    log_text: content\n  }).then(r => r.data)\n};\nexport default apiService;","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","headers","fileUploadClient","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","apiService","getAgentsStatus","get","healthCheck","getRootInfo","analyzeLogFile","file","options","formData","FormData","append","Object","keys","forEach","key","post","analyzeLogText","logText","log_text","analyzeSample","sampleType","sample_type","getMetricsSummary","getRecentActivity","coordinatorAgent","getStatus","then","r","executeWorkflow","anomalyAgent","detectAnomalies","rootCauseAgent","analyzeRootCause","logParserAgent","parseLogs","explanationAgent","generateExplanation","getSystemHealth","uploadLogFile","analyzeLogContent","content"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca-bk/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instances for different services\nconst apiClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst fileUploadClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 120000, // Longer timeout for file uploads\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n});\n\n// ...existing code...\n\n// Request interceptors\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptors\napiClient.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Agents status endpoint for App.js\n  getAgentsStatus: async () => {\n    const response = await apiClient.get('/agents/status');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n\n  // Root endpoint info\n  getRootInfo: async () => {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n\n  \n \n  // Analysis endpoints (agent-based)\n  analyzeLogFile: async (file, options = {}) => {\n    const formData = new FormData();\n    formData.append('files', file);\n    \n    // Add options to form data if needed\n    Object.keys(options).forEach(key => {\n      formData.append(key, options[key]);\n    });\n\n    const response = await fileUploadClient.post('/batch-analyze', formData);\n    return response.data;\n  },\n\n  analyzeLogText: async (logText, options = {}) => {\n    const response = await apiClient.post('/analyze', {\n      log_text: logText,\n      ...options\n    });\n    return response.data;\n  },\n\n  analyzeSample: async (sampleType = 'hadoop_error_logs') => {\n    const response = await apiClient.post('/analyze/sample', {\n      sample_type: sampleType\n    });\n    return response.data;\n  },\n\n  // System monitoring\n  getMetricsSummary: async () => {\n    const response = await apiClient.get('/metrics/summary');\n    return response.data;\n  },\n\n  getRecentActivity: async () => {\n    const response = await apiClient.get('/activity/recent');\n    return response.data;\n  },\n\n  // ...existing code...\n\n  // Agent-specific operations (using generic agent endpoints)\n  coordinatorAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    executeWorkflow: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  anomalyAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    detectAnomalies: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  rootCauseAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    analyzeRootCause: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  logParserAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    parseLogs: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  explanationAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    generateExplanation: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  // ...existing code...\n\n  // System health monitoring\n  getSystemHealth: () => apiClient.get('/health').then(r => r.data),\n  \n  // File upload for log analysis (uses batch-analyze endpoint)\n  uploadLogFile: (file) => {\n    const formData = new FormData();\n    formData.append('files', file);\n    return fileUploadClient.post('/batch-analyze', formData).then(r => r.data);\n  },\n\n  // Log analysis\n  analyzeLogContent: (content) => apiClient.post('/analyze', { log_text: content }).then(r => r.data)\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from'axios';// Create axios instances for different services\nconst apiClient=axios.create({baseURL:'https://56.228.43.181:8000',timeout:30000,headers:{'Content-Type':'application/json'}});const fileUploadClient=axios.create({baseURL:'https://56.228.43.181:8000',timeout:120000,// Longer timeout for file uploads\nheaders:{'Content-Type':'multipart/form-data'}});// ...existing code...\n// Request interceptors\napiClient.interceptors.request.use(config=>{var _config$method;console.log(`API Request: ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);return config;},error=>{return Promise.reject(error);});// Response interceptors\napiClient.interceptors.response.use(response=>{console.log(`API Response: ${response.status} ${response.config.url}`);return response;},error=>{var _error$response;console.error('API Error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});export const apiService={// Agents status endpoint for App.js\ngetAgentsStatus:async()=>{const response=await apiClient.get('/agents/status');return response.data;},// Health check\nhealthCheck:async()=>{const response=await apiClient.get('/health');return response.data;},// Root endpoint info\ngetRootInfo:async()=>{const response=await apiClient.get('/');return response.data;},// Analysis endpoints (agent-based)\nanalyzeLogFile:async function(file){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const formData=new FormData();formData.append('files',file);// Add options to form data if needed\nObject.keys(options).forEach(key=>{formData.append(key,options[key]);});const response=await fileUploadClient.post('/batch-analyze',formData);return response.data;},analyzeLogText:async function(logText){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await apiClient.post('/analyze',{log_text:logText,...options});return response.data;},analyzeSample:async function(){let sampleType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'hadoop_error_logs';const response=await apiClient.post('/analyze/sample',{sample_type:sampleType});return response.data;},// System monitoring\ngetMetricsSummary:async()=>{const response=await apiClient.get('/metrics/summary');return response.data;},getRecentActivity:async()=>{const response=await apiClient.get('/activity/recent');return response.data;},// ...existing code...\n// Agent-specific operations (using generic agent endpoints)\ncoordinatorAgent:{getStatus:()=>apiClient.get('/agents/status').then(r=>r.data),executeWorkflow:data=>apiClient.post('/analyze',data).then(r=>r.data)},anomalyAgent:{getStatus:()=>apiClient.get('/agents/status').then(r=>r.data),detectAnomalies:data=>apiClient.post('/analyze',data).then(r=>r.data)},rootCauseAgent:{getStatus:()=>apiClient.get('/agents/status').then(r=>r.data),analyzeRootCause:data=>apiClient.post('/analyze',data).then(r=>r.data)},logParserAgent:{getStatus:()=>apiClient.get('/agents/status').then(r=>r.data),parseLogs:data=>apiClient.post('/analyze',data).then(r=>r.data)},explanationAgent:{getStatus:()=>apiClient.get('/agents/status').then(r=>r.data),generateExplanation:data=>apiClient.post('/analyze',data).then(r=>r.data)},// ...existing code...\n// System health monitoring\ngetSystemHealth:()=>apiClient.get('/health').then(r=>r.data),// File upload for log analysis (uses batch-analyze endpoint)\nuploadLogFile:file=>{const formData=new FormData();formData.append('files',file);return fileUploadClient.post('/batch-analyze',formData).then(r=>r.data);},// Log analysis\nanalyzeLogContent:content=>apiClient.post('/analyze',{log_text:content}).then(r=>r.data)};export default apiService;","map":{"version":3,"names":["axios","apiClient","create","baseURL","timeout","headers","fileUploadClient","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","apiService","getAgentsStatus","get","healthCheck","getRootInfo","analyzeLogFile","file","options","arguments","length","undefined","formData","FormData","append","Object","keys","forEach","key","post","analyzeLogText","logText","log_text","analyzeSample","sampleType","sample_type","getMetricsSummary","getRecentActivity","coordinatorAgent","getStatus","then","r","executeWorkflow","anomalyAgent","detectAnomalies","rootCauseAgent","analyzeRootCause","logParserAgent","parseLogs","explanationAgent","generateExplanation","getSystemHealth","uploadLogFile","analyzeLogContent","content"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca-bk/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instances for different services\nconst apiClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst fileUploadClient = axios.create({\n  baseURL: 'https://56.228.43.181:8000',\n  timeout: 120000, // Longer timeout for file uploads\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n});\n\n// ...existing code...\n\n// Request interceptors\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptors\napiClient.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport const apiService = {\n  // Agents status endpoint for App.js\n  getAgentsStatus: async () => {\n    const response = await apiClient.get('/agents/status');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n\n  // Root endpoint info\n  getRootInfo: async () => {\n    const response = await apiClient.get('/');\n    return response.data;\n  },\n\n  \n \n  // Analysis endpoints (agent-based)\n  analyzeLogFile: async (file, options = {}) => {\n    const formData = new FormData();\n    formData.append('files', file);\n    \n    // Add options to form data if needed\n    Object.keys(options).forEach(key => {\n      formData.append(key, options[key]);\n    });\n\n    const response = await fileUploadClient.post('/batch-analyze', formData);\n    return response.data;\n  },\n\n  analyzeLogText: async (logText, options = {}) => {\n    const response = await apiClient.post('/analyze', {\n      log_text: logText,\n      ...options\n    });\n    return response.data;\n  },\n\n  analyzeSample: async (sampleType = 'hadoop_error_logs') => {\n    const response = await apiClient.post('/analyze/sample', {\n      sample_type: sampleType\n    });\n    return response.data;\n  },\n\n  // System monitoring\n  getMetricsSummary: async () => {\n    const response = await apiClient.get('/metrics/summary');\n    return response.data;\n  },\n\n  getRecentActivity: async () => {\n    const response = await apiClient.get('/activity/recent');\n    return response.data;\n  },\n\n  // ...existing code...\n\n  // Agent-specific operations (using generic agent endpoints)\n  coordinatorAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    executeWorkflow: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  anomalyAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    detectAnomalies: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  rootCauseAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    analyzeRootCause: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  logParserAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    parseLogs: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  explanationAgent: {\n    getStatus: () => apiClient.get('/agents/status').then(r => r.data),\n    generateExplanation: (data) => apiClient.post('/analyze', data).then(r => r.data),\n  },\n\n  // ...existing code...\n\n  // System health monitoring\n  getSystemHealth: () => apiClient.get('/health').then(r => r.data),\n  \n  // File upload for log analysis (uses batch-analyze endpoint)\n  uploadLogFile: (file) => {\n    const formData = new FormData();\n    formData.append('files', file);\n    return fileUploadClient.post('/batch-analyze', formData).then(r => r.data);\n  },\n\n  // Log analysis\n  analyzeLogContent: (content) => apiClient.post('/analyze', { log_text: content }).then(r => r.data)\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
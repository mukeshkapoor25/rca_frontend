{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Routes,Route}from'react-router-dom';import{Container}from'react-bootstrap';// Components\nimport Navigation from'./components/Navigation';import Dashboard from'./components/Dashboard';import UploadLogFile from'./components/UploadLogFile';import RCALatestCard from'./components/RCALatestCard';import Chatbot from'./components/Chatbot';// Services\nimport{apiService}from'./services/apiService';import{getAPIHealthStatus}from'./api/health';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[apiHealth,setApiHealth]=useState(null);const[isConnected,setIsConnected]=useState(false);const[agentsStatus,setAgentsStatus]=useState({});useEffect(()=>{// Initial data fetch\ncheckApiHealth();fetchAgentsStatus();// Set up periodic checks\nconst healthInterval=setInterval(checkApiHealth,30000);const agentsInterval=setInterval(fetchAgentsStatus,10000);return()=>{clearInterval(healthInterval);clearInterval(agentsInterval);};},[]);const checkApiHealth=async()=>{try{const health=await getAPIHealthStatus();setApiHealth(health);setIsConnected(health==='healthy');}catch(error){console.error('API health check failed:',error);setIsConnected(false);setApiHealth(null);}};const fetchAgentsStatus=async()=>{try{const status=await apiService.getAgentsStatus();setAgentsStatus(status);}catch(error){console.error('Failed to fetch agents status:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Navigation,{isConnected:isConnected,agentsStatus:agentsStatus}),/*#__PURE__*/_jsx(Container,{fluid:true,className:\"py-4\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Dashboard,{apiHealth:apiHealth,isConnected:isConnected,agentsStatus:agentsStatus})}),/*#__PURE__*/_jsx(Route,{path:\"/upload\",element:/*#__PURE__*/_jsx(UploadLogFile,{})}),/*#__PURE__*/_jsx(Route,{path:\"/rca-results\",element:/*#__PURE__*/_jsx(RCALatestCard,{})})]})}),/*#__PURE__*/_jsx(Chatbot,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","Container","Navigation","Dashboard","UploadLogFile","RCALatestCard","Chatbot","apiService","getAPIHealthStatus","jsx","_jsx","jsxs","_jsxs","App","apiHealth","setApiHealth","isConnected","setIsConnected","agentsStatus","setAgentsStatus","checkApiHealth","fetchAgentsStatus","healthInterval","setInterval","agentsInterval","clearInterval","health","error","console","status","getAgentsStatus","className","children","fluid","path","element"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca-bk/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Dashboard from './components/Dashboard';\nimport UploadLogFile from './components/UploadLogFile';\nimport RCALatestCard from './components/RCALatestCard';\nimport Chatbot from './components/Chatbot';\n\n// Services\nimport { apiService } from './services/apiService';\nimport { getAPIHealthStatus } from './api/health';\n\nfunction App() {\n  const [apiHealth, setApiHealth] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [agentsStatus, setAgentsStatus] = useState({});\n\n  useEffect(() => {\n    // Initial data fetch\n    checkApiHealth();\n    fetchAgentsStatus();\n\n    // Set up periodic checks\n    const healthInterval = setInterval(checkApiHealth, 30000);\n    const agentsInterval = setInterval(fetchAgentsStatus, 10000);\n\n    return () => {\n      clearInterval(healthInterval);\n      clearInterval(agentsInterval);\n    };\n  }, []);\n\n  const checkApiHealth = async () => {\n    try {\n      const health = await getAPIHealthStatus();\n      setApiHealth(health);\n      setIsConnected(health === 'healthy');\n    } catch (error) {\n      console.error('API health check failed:', error);\n      setIsConnected(false);\n      setApiHealth(null);\n    }\n  };\n\n  const fetchAgentsStatus = async () => {\n    try {\n      const status = await apiService.getAgentsStatus();\n      setAgentsStatus(status);\n    } catch (error) {\n      console.error('Failed to fetch agents status:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation isConnected={isConnected} agentsStatus={agentsStatus} />\n      <Container fluid className=\"py-4\">\n        <Routes>\n          <Route \n            path=\"/\" \n            element={\n              <Dashboard \n                apiHealth={apiHealth} \n                isConnected={isConnected}\n                agentsStatus={agentsStatus}\n              />\n            } \n          />\n           \n          <Route \n            path=\"/upload\" \n            element={<UploadLogFile />} \n          />\n          <Route \n            path=\"/rca-results\" \n            element={<RCALatestCard />} \n          />\n          {/* Removed: AgentsManagement, RealTimeStream, SystemHealth routes */}\n        </Routes>\n      </Container>\n      <Chatbot />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
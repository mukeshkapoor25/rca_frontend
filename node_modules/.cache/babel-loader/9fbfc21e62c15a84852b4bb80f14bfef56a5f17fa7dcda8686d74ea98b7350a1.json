{"ast":null,"code":"var _jsxFileName = \"/Users/mukeshkapoor/projects/logbert_hadoop_rca/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Dashboard from './components/Dashboard';\nimport LogAnalysis from './components/LogAnalysis';\nimport AgentsManagement from './components/AgentsManagement';\nimport RealTimeStream from './components/RealTimeStream';\nimport SystemHealth from './components/SystemHealth';\n\n// Services\nimport { apiService, initializeSocket } from './services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [apiHealth, setApiHealth] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [agentsStatus, setAgentsStatus] = useState({});\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    // Initialize socket connection\n    const socketInstance = initializeSocket();\n    setSocket(socketInstance);\n\n    // Set up socket event listeners\n    socketInstance.on('connect', () => {\n      console.log('Connected to server');\n      setIsConnected(true);\n    });\n    socketInstance.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setIsConnected(false);\n    });\n\n    // Subscribe to real-time updates\n    apiService.subscribeToDashboard(data => {\n      console.log('Dashboard update:', data);\n    });\n    apiService.subscribeToAgents(data => {\n      console.log('Agents update:', data);\n      setAgentsStatus(data);\n    });\n\n    // Initial data fetch\n    checkApiHealth();\n    fetchAgentsStatus();\n\n    // Set up periodic checks\n    const healthInterval = setInterval(checkApiHealth, 30000);\n    const agentsInterval = setInterval(fetchAgentsStatus, 10000);\n    return () => {\n      clearInterval(healthInterval);\n      clearInterval(agentsInterval);\n      if (socketInstance) {\n        socketInstance.disconnect();\n      }\n    };\n  }, []);\n  const checkApiHealth = async () => {\n    try {\n      const health = await apiService.healthCheck();\n      setApiHealth(health);\n      setIsConnected(true);\n    } catch (error) {\n      console.error('API health check failed:', error);\n      setIsConnected(false);\n      setApiHealth(null);\n    }\n  };\n  const fetchAgentsStatus = async () => {\n    try {\n      const status = await apiService.getAgentsStatus();\n      setAgentsStatus(status);\n    } catch (error) {\n      console.error('Failed to fetch agents status:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      isConnected: isConnected,\n      agentsStatus: agentsStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"py-4\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Dashboard, {\n            apiHealth: apiHealth,\n            isConnected: isConnected,\n            agentsStatus: agentsStatus,\n            socket: socket\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/analyze\",\n          element: /*#__PURE__*/_jsxDEV(LogAnalysis, {\n            agentsStatus: agentsStatus,\n            socket: socket\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/agents\",\n          element: /*#__PURE__*/_jsxDEV(AgentsManagement, {\n            agentsStatus: agentsStatus,\n            onRefresh: fetchAgentsStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/stream\",\n          element: /*#__PURE__*/_jsxDEV(RealTimeStream, {\n            socket: socket,\n            isConnected: isConnected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/health\",\n          element: /*#__PURE__*/_jsxDEV(SystemHealth, {\n            apiHealth: apiHealth,\n            agentsStatus: agentsStatus,\n            isConnected: isConnected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TVOWtWv3n/p49JOUlUSL4f+/WNs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","Container","Navigation","Dashboard","LogAnalysis","AgentsManagement","RealTimeStream","SystemHealth","apiService","initializeSocket","jsxDEV","_jsxDEV","App","_s","apiHealth","setApiHealth","isConnected","setIsConnected","agentsStatus","setAgentsStatus","socket","setSocket","socketInstance","on","console","log","subscribeToDashboard","data","subscribeToAgents","checkApiHealth","fetchAgentsStatus","healthInterval","setInterval","agentsInterval","clearInterval","disconnect","health","healthCheck","error","status","getAgentsStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fluid","path","element","onRefresh","_c","$RefreshReg$"],"sources":["/Users/mukeshkapoor/projects/logbert_hadoop_rca/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Dashboard from './components/Dashboard';\nimport LogAnalysis from './components/LogAnalysis';\nimport AgentsManagement from './components/AgentsManagement';\nimport RealTimeStream from './components/RealTimeStream';\nimport SystemHealth from './components/SystemHealth';\n\n// Services\nimport { apiService, initializeSocket } from './services/apiService';\n\nfunction App() {\n  const [apiHealth, setApiHealth] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [agentsStatus, setAgentsStatus] = useState({});\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    // Initialize socket connection\n    const socketInstance = initializeSocket();\n    setSocket(socketInstance);\n\n    // Set up socket event listeners\n    socketInstance.on('connect', () => {\n      console.log('Connected to server');\n      setIsConnected(true);\n    });\n\n    socketInstance.on('disconnect', () => {\n      console.log('Disconnected from server');\n      setIsConnected(false);\n    });\n\n    // Subscribe to real-time updates\n    apiService.subscribeToDashboard((data) => {\n      console.log('Dashboard update:', data);\n    });\n\n    apiService.subscribeToAgents((data) => {\n      console.log('Agents update:', data);\n      setAgentsStatus(data);\n    });\n\n    // Initial data fetch\n    checkApiHealth();\n    fetchAgentsStatus();\n\n    // Set up periodic checks\n    const healthInterval = setInterval(checkApiHealth, 30000);\n    const agentsInterval = setInterval(fetchAgentsStatus, 10000);\n\n    return () => {\n      clearInterval(healthInterval);\n      clearInterval(agentsInterval);\n      if (socketInstance) {\n        socketInstance.disconnect();\n      }\n    };\n  }, []);\n\n  const checkApiHealth = async () => {\n    try {\n      const health = await apiService.healthCheck();\n      setApiHealth(health);\n      setIsConnected(true);\n    } catch (error) {\n      console.error('API health check failed:', error);\n      setIsConnected(false);\n      setApiHealth(null);\n    }\n  };\n\n  const fetchAgentsStatus = async () => {\n    try {\n      const status = await apiService.getAgentsStatus();\n      setAgentsStatus(status);\n    } catch (error) {\n      console.error('Failed to fetch agents status:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation isConnected={isConnected} agentsStatus={agentsStatus} />\n      <Container fluid className=\"py-4\">\n        <Routes>\n          <Route \n            path=\"/\" \n            element={\n              <Dashboard \n                apiHealth={apiHealth} \n                isConnected={isConnected}\n                agentsStatus={agentsStatus}\n                socket={socket}\n              />\n            } \n          />\n          <Route \n            path=\"/analyze\" \n            element={\n              <LogAnalysis \n                agentsStatus={agentsStatus}\n                socket={socket}\n              />\n            } \n          />\n          <Route \n            path=\"/agents\" \n            element={\n              <AgentsManagement \n                agentsStatus={agentsStatus}\n                onRefresh={fetchAgentsStatus}\n              />\n            } \n          />\n          <Route \n            path=\"/stream\" \n            element={\n              <RealTimeStream \n                socket={socket}\n                isConnected={isConnected}\n              />\n            } \n          />\n          <Route \n            path=\"/health\" \n            element={\n              <SystemHealth \n                apiHealth={apiHealth}\n                agentsStatus={agentsStatus}\n                isConnected={isConnected}\n              />\n            } \n          />\n        </Routes>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}